name: Deploy to Server

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e  # ← 에러 발생 시 즉시 중단!
            
            echo "🚀 배포 시작..."
            echo "📌 배포 브랜치: ${{ github.ref_name }}"
            
            mkdir -p PROJECTS
            cd PROJECTS
            
            if [ ! -d "my-blog" ]; then
              echo "📥 저장소 클론 중..."
              git clone https://github.com/${{ github.repository }} my-blog
              cd my-blog
              git checkout ${{ github.ref_name }}
            else
              echo "📥 기존 저장소 업데이트 중..."
              cd my-blog
              git fetch origin
              git checkout ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
              git reset --hard origin/${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}
            fi
            
            echo "🔐 환경변수 파일 생성 중..."
            cat > .env.production.local << 'EOF'
            ${{ secrets.ENV_PRODUCTION }}
            EOF

            if [ ! -f .env.production.local ]; then
              echo "❌ .env.production.local 생성 실패"
              exit 1
            fi
            echo "✅ .env.production.local 생성 완료"

            echo "🔐 Google Vision 인증 파일 생성 중..."
            mkdir -p .config
            cat > .config/google-vision.json << 'EOF'
            ${{ secrets.GOOGLE_VISION_JSON }}
            EOF

            if [ ! -f .config/google-vision.json ]; then
              echo "❌ .config/google-vision.json 생성 실패"
              exit 1
            fi
            echo "✅ .config/google-vision.json 생성 완료"
            
            VERSION=$(echo "${{ github.ref_name }}" | sed 's/release\///')
            echo "📦 배포 버전: ${VERSION}"
            
            echo "🔨 Docker 이미지 빌드 중..."
            /snap/bin/docker build -t my-blog:${VERSION} .
            if [ $? -ne 0 ]; then
              echo "❌ Docker 빌드 실패!"
              exit 1
            fi
            
            /snap/bin/docker tag my-blog:${VERSION} my-blog:latest
            if [ $? -ne 0 ]; then
              echo "❌ Docker 태그 실패!"
              exit 1
            fi
            echo "✅ Docker 이미지 빌드 완료"
            
            echo "🔄 컨테이너 재시작 중..."
            export APP_VERSION=${VERSION}
            /snap/bin/docker compose down
            /snap/bin/docker compose up -d
            if [ $? -ne 0 ]; then
              echo "❌ 컨테이너 시작 실패!"
              exit 1
            fi
            echo "✅ 컨테이너 시작 완료"
            
            echo "🧹 Docker 이미지 정리 중..."
            /snap/bin/docker image prune -af --filter "until=24h"
            
            echo "✅ 배포 완료!"
            echo "📋 실행 중인 컨테이너:"
            /snap/bin/docker ps | grep my-blog
            
            echo ""
            echo "🎉 배포 성공!"
            echo "📦 버전: ${VERSION}"
            echo "🌿 브랜치: ${{ github.ref_name }}"